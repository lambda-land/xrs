




flip = fun f x y -> f y x

id = fun x -> x

const = fun x y -> x

add = fun x y -> x + y

inc = add 1

length = fun xs -> if xs == [] 
                    then 0 
                    else 1 + length (tail xs)

cons = fun x xs -> [x] ++ xs

snoc = fun xs x -> xs ++ [x]


reverse = fun xs -> if xs == [] 
                     then [] 
                     else reverse (tail xs) ++ [head xs]

map = fun f xs -> if xs == [] 
                   then [] 
                   else [f (head xs)] ++ map f (tail xs)

concatMap = fun f xs -> if xs == [] 
                         then [] 
                         else f (head xs) ++ concatMap f (tail xs)

insert = fun x ys -> if ys == []
                      then [[x]]
                      else [[x] ++ ys] ++ map (cons (head ys)) (insert x (tail ys))

permutations = fun xs -> if xs == []
                          then [[]]
                          else concatMap (insert (head xs)) (permutations (tail xs))



take = fun n xs -> if n == 0 
                     then [] 
                     else [head xs] ++ take (n - 1) (tail xs)

min = fun x y -> if x < y then x else y

minimum = fun xs -> if length xs == 1 then head xs else min (head xs) (minimum (tail xs))

nats = fun n -> if n == 0 
                 then [] 
                 else nats (n - 1) ++ [n]



fib = fun n -> if n < 2 
                then n 
                else fib (n - 1) + fib (n - 2)

fac = fun n -> if n < 2 
                then 1 
                else n * fac (n - 1)

foundation = fun x -> [x]

peano = fun n -> if n == 0
                    then []
                    else foundation (peano (n - 1))


add2 = fun x y z -> x + y + z


fac = fun n -> if n < 2 then 1 else n * (fac (n - 1))

fac2 = fun n res -> if n == 0 then res else fac2 (n - 1) (n * res)