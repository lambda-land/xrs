-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Lang.Parser.Lang.Par
  ( happyError
  , myLexer
  , pSCPL
  , pListDefn
  , pDefn
  , pStmt2
  , pLet
  , pStmt1
  , pCaseTerm
  , pLetInStmt
  , pType
  , pTypeN
  , pListTypeN
  , pListType
  , pListUIdent
  , pCasePattern
  , pListCaseTerm
  , pExp15
  , pExp13
  , pExp12
  , pExp11
  , pExp9
  , pExp8
  , pExp4
  , pExp3
  , pExp1
  , pListPIdent
  , pTypeAnnotation
  , pExp
  , pExp2
  , pExp5
  , pExp6
  , pExp7
  , pExp10
  , pExp14
  , pListExp
  , pConstantType
  ) where

import Prelude

import qualified Lang.Parser.Lang.Abs
import Lang.Parser.Lang.Lex

}

%name pSCPL_internal SCPL
%name pListDefn_internal ListDefn
%name pDefn_internal Defn
%name pStmt2_internal Stmt2
%name pLet_internal Let
%name pStmt1_internal Stmt1
%name pCaseTerm_internal CaseTerm
%name pLetInStmt_internal LetInStmt
%name pType_internal Type
%name pTypeN_internal TypeN
%name pListTypeN_internal ListTypeN
%name pListType_internal ListType
%name pListUIdent_internal ListUIdent
%name pCasePattern_internal CasePattern
%name pListCaseTerm_internal ListCaseTerm
%name pExp15_internal Exp15
%name pExp13_internal Exp13
%name pExp12_internal Exp12
%name pExp11_internal Exp11
%name pExp9_internal Exp9
%name pExp8_internal Exp8
%name pExp4_internal Exp4
%name pExp3_internal Exp3
%name pExp1_internal Exp1
%name pListPIdent_internal ListPIdent
%name pTypeAnnotation_internal TypeAnnotation
%name pExp_internal Exp
%name pExp2_internal Exp2
%name pExp5_internal Exp5
%name pExp6_internal Exp6
%name pExp7_internal Exp7
%name pExp10_internal Exp10
%name pExp14_internal Exp14
%name pListExp_internal ListExp
%name pConstantType_internal ConstantType
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='       { PT _ (TS _ 1)       }
  '&&'       { PT _ (TS _ 2)       }
  '('        { PT _ (TS _ 3)       }
  ')'        { PT _ (TS _ 4)       }
  '*'        { PT _ (TS _ 5)       }
  '+'        { PT _ (TS _ 6)       }
  '++'       { PT _ (TS _ 7)       }
  ','        { PT _ (TS _ 8)       }
  '-'        { PT _ (TS _ 9)       }
  '->'       { PT _ (TS _ 10)      }
  '/'        { PT _ (TS _ 11)      }
  ':'        { PT _ (TS _ 12)      }
  '::'       { PT _ (TS _ 13)      }
  ';'        { PT _ (TS _ 14)      }
  '<'        { PT _ (TS _ 15)      }
  '<='       { PT _ (TS _ 16)      }
  '='        { PT _ (TS _ 17)      }
  '=='       { PT _ (TS _ 18)      }
  '>'        { PT _ (TS _ 19)      }
  '>='       { PT _ (TS _ 20)      }
  'False'    { PT _ (TS _ 21)      }
  'True'     { PT _ (TS _ 22)      }
  '['        { PT _ (TS _ 23)      }
  '\\'       { PT _ (TS _ 24)      }
  ']'        { PT _ (TS _ 25)      }
  'case'     { PT _ (TS _ 26)      }
  'else'     { PT _ (TS _ 27)      }
  'fun'      { PT _ (TS _ 28)      }
  'if'       { PT _ (TS _ 29)      }
  'in'       { PT _ (TS _ 30)      }
  'let'      { PT _ (TS _ 31)      }
  'letrec'   { PT _ (TS _ 32)      }
  'of'       { PT _ (TS _ 33)      }
  'then'     { PT _ (TS _ 34)      }
  '{'        { PT _ (TS _ 35)      }
  '||'       { PT _ (TS _ 36)      }
  '}'        { PT _ (TS _ 37)      }
  L_charac   { PT _ (TC _)         }
  L_doubl    { PT _ (TD _)         }
  L_quoted   { PT _ (TL _)         }
  L_TokUnit  { PT _ (T_TokUnit _)  }
  L_UIdent   { PT _ (T_UIdent _)   }
  L_PIdent   { PT _ (T_PIdent _)   }
  L_PInteger { PT _ (T_PInteger _) }

%%

Char    :: { (Lang.Parser.Lang.Abs.BNFC'Position, Char) }
Char     : L_charac { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Char) }

Double  :: { (Lang.Parser.Lang.Abs.BNFC'Position, Double) }
Double   : L_doubl  { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Double) }

String  :: { (Lang.Parser.Lang.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

TokUnit :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.TokUnit) }
TokUnit  : L_TokUnit { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.TokUnit (mkPosToken $1)) }

UIdent :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.UIdent) }
UIdent  : L_UIdent { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.UIdent (mkPosToken $1)) }

PIdent :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.PIdent) }
PIdent  : L_PIdent { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.PIdent (mkPosToken $1)) }

PInteger :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.PInteger) }
PInteger  : L_PInteger { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.PInteger (mkPosToken $1)) }

SCPL :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.SCPL) }
SCPL
  : ListDefn { (fst $1, Lang.Parser.Lang.Abs.SCPLPROG (fst $1) (snd $1)) }

ListDefn :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.Defn]) }
ListDefn
  : Defn { (fst $1, (:[]) (snd $1)) }
  | Defn ListDefn { (fst $1, (:) (snd $1) (snd $2)) }

Defn :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Defn) }
Defn
  : PIdent '=' Stmt1 { (fst $1, Lang.Parser.Lang.Abs.DEFN (fst $1) (snd $1) (snd $3)) }

Stmt2 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Stmt) }
Stmt2
  : 'case' Exp 'of' '{' ListCaseTerm '}' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.CASESTMT (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | 'if' Exp 'then' Stmt2 'else' Stmt2 { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.IFSTMT (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | Exp { (fst $1, Lang.Parser.Lang.Abs.BARESTMT (fst $1) (snd $1)) }

Let :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Let) }
Let
  : 'let' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.LET (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'letrec' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.LRec (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1))) }

Stmt1 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Stmt) }
Stmt1
  : Let LetInStmt 'in' Stmt1 { (fst $1, Lang.Parser.Lang.Abs.ELet (fst $1) (snd $1) (snd $2) (snd $4)) }
  | Stmt2 { (fst $1, (snd $1)) }

CaseTerm :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.CaseTerm) }
CaseTerm
  : CasePattern '->' Stmt1 { (fst $1, Lang.Parser.Lang.Abs.CASE_STMT (fst $1) (snd $1) (snd $3)) }

LetInStmt :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.LetInStmt) }
LetInStmt
  : PIdent '=' Exp { (fst $1, Lang.Parser.Lang.Abs.LET_IN_STMT (fst $1) (snd $1) (snd $3)) }

Type :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Type) }
Type
  : TypeN '->' Type { (fst $1, Lang.Parser.Lang.Abs.TYPEARROW (fst $1) (snd $1) (snd $3)) }
  | TypeN { (fst $1, Lang.Parser.Lang.Abs.TYPENext (fst $1) (snd $1)) }

TypeN :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.TypeN) }
TypeN
  : TokUnit { (fst $1, Lang.Parser.Lang.Abs.TYPEUNIT (fst $1) (snd $1)) }
  | UIdent { (fst $1, Lang.Parser.Lang.Abs.TYPECONST_VAR (fst $1) (snd $1)) }
  | '[' Type ']' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.TYPELIST (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '<' ListType '>' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.TYPEPROD (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' Type ')' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.TYPEBRACKET (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | ConstantType { (fst $1, Lang.Parser.Lang.Abs.CONST_TYPE (fst $1) (snd $1)) }

ListTypeN :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.TypeN]) }
ListTypeN
  : {- empty -} { (Lang.Parser.Lang.Abs.BNFC'NoPosition, []) }
  | TypeN { (fst $1, (:[]) (snd $1)) }
  | TypeN ',' ListTypeN { (fst $1, (:) (snd $1) (snd $3)) }

ListType :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.Type]) }
ListType
  : Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

ListUIdent :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.UIdent]) }
ListUIdent
  : {- empty -} { (Lang.Parser.Lang.Abs.BNFC'NoPosition, []) }
  | UIdent { (fst $1, (:[]) (snd $1)) }
  | UIdent ',' ListUIdent { (fst $1, (:) (snd $1) (snd $3)) }

CasePattern :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.CasePattern) }
CasePattern
  : 'True' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.TRUE_PATTERN (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'False' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.FALSE_PATTERN (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1))) }

ListCaseTerm :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.CaseTerm]) }
ListCaseTerm
  : CaseTerm { (fst $1, (:[]) (snd $1)) }
  | CaseTerm ';' ListCaseTerm { (fst $1, (:) (snd $1) (snd $3)) }

Exp15 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp15
  : PInteger { (fst $1, Lang.Parser.Lang.Abs.EInt (fst $1) (snd $1)) }
  | 'True' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.ETrue (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'False' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.EFalse (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1))) }
  | PIdent { (fst $1, Lang.Parser.Lang.Abs.EVar (fst $1) (snd $1)) }
  | String { (fst $1, Lang.Parser.Lang.Abs.EString (fst $1) (snd $1)) }
  | '[' ListExp ']' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.EList (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | PIdent '(' ListExp ')' { (fst $1, Lang.Parser.Lang.Abs.ECall (fst $1) (snd $1) (snd $3)) }
  | '(' Exp ')' { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }

Exp13 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp13
  : '-' Exp14 { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.ENeg (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Exp13 ':' Exp14 { (fst $1, Lang.Parser.Lang.Abs.CONSTERM (fst $1) (snd $1) (snd $3)) }
  | Exp14 { (fst $1, (snd $1)) }

Exp12 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp12
  : Exp12 '++' Exp13 { (fst $1, Lang.Parser.Lang.Abs.EAPPEND (fst $1) (snd $1) (snd $3)) }
  | Exp12 '*' Exp13 { (fst $1, Lang.Parser.Lang.Abs.EMul (fst $1) (snd $1) (snd $3)) }
  | Exp12 '/' Exp13 { (fst $1, Lang.Parser.Lang.Abs.EDiv (fst $1) (snd $1) (snd $3)) }
  | Exp13 { (fst $1, (snd $1)) }

Exp11 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp11
  : Exp11 '+' Exp12 { (fst $1, Lang.Parser.Lang.Abs.EAdd (fst $1) (snd $1) (snd $3)) }
  | Exp11 '-' Exp12 { (fst $1, Lang.Parser.Lang.Abs.ESub (fst $1) (snd $1) (snd $3)) }
  | Exp12 { (fst $1, (snd $1)) }

Exp9 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp9
  : Exp9 '<' Exp10 { (fst $1, Lang.Parser.Lang.Abs.ELt (fst $1) (snd $1) (snd $3)) }
  | Exp9 '>' Exp10 { (fst $1, Lang.Parser.Lang.Abs.EGt (fst $1) (snd $1) (snd $3)) }
  | Exp9 '<=' Exp10 { (fst $1, Lang.Parser.Lang.Abs.ELEq (fst $1) (snd $1) (snd $3)) }
  | Exp9 '>=' Exp10 { (fst $1, Lang.Parser.Lang.Abs.EGEq (fst $1) (snd $1) (snd $3)) }
  | Exp10 { (fst $1, (snd $1)) }

Exp8 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp8
  : Exp8 '==' Exp9 { (fst $1, Lang.Parser.Lang.Abs.EEq (fst $1) (snd $1) (snd $3)) }
  | Exp8 '!=' Exp9 { (fst $1, Lang.Parser.Lang.Abs.ENEq (fst $1) (snd $1) (snd $3)) }
  | Exp9 { (fst $1, (snd $1)) }

Exp4 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp4
  : Exp4 '&&' Exp5 { (fst $1, Lang.Parser.Lang.Abs.EAnd (fst $1) (snd $1) (snd $3)) }
  | Exp5 { (fst $1, (snd $1)) }

Exp3 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp3
  : Exp3 '||' Exp4 { (fst $1, Lang.Parser.Lang.Abs.EOr (fst $1) (snd $1) (snd $3)) }
  | Exp4 { (fst $1, (snd $1)) }

Exp1 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp1
  : '\\' ListPIdent '->' Stmt1 { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.ELambda (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'fun' ListPIdent '->' Stmt1 { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.ELambda (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | Exp1 Exp2 { (fst $1, Lang.Parser.Lang.Abs.EApp (fst $1) (snd $1) (snd $2)) }
  | Exp2 { (fst $1, (snd $1)) }

ListPIdent :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.PIdent]) }
ListPIdent
  : PIdent { (fst $1, (:[]) (snd $1)) }
  | PIdent ListPIdent { (fst $1, (:) (snd $1) (snd $2)) }

TypeAnnotation :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.TypeAnnotation) }
TypeAnnotation
  : '::' Type { (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1), Lang.Parser.Lang.Abs.TYPEANNOTATION (uncurry Lang.Parser.Lang.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | {- empty -} { (Lang.Parser.Lang.Abs.BNFC'NoPosition, Lang.Parser.Lang.Abs.TYPEANNOTATION_EMPTY Lang.Parser.Lang.Abs.BNFC'NoPosition) }

Exp :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp : Exp1 { (fst $1, (snd $1)) }

Exp2 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp2 : Exp3 { (fst $1, (snd $1)) }

Exp5 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp5 : Exp6 { (fst $1, (snd $1)) }

Exp6 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp6 : Exp7 { (fst $1, (snd $1)) }

Exp7 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp7 : Exp8 { (fst $1, (snd $1)) }

Exp10 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp10 : Exp11 { (fst $1, (snd $1)) }

Exp14 :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.Exp) }
Exp14 : Exp15 { (fst $1, (snd $1)) }

ListExp :: { (Lang.Parser.Lang.Abs.BNFC'Position, [Lang.Parser.Lang.Abs.Exp]) }
ListExp
  : {- empty -} { (Lang.Parser.Lang.Abs.BNFC'NoPosition, []) }
  | Exp { (fst $1, (:[]) (snd $1)) }
  | Exp ',' ListExp { (fst $1, (:) (snd $1) (snd $3)) }

ConstantType :: { (Lang.Parser.Lang.Abs.BNFC'Position, Lang.Parser.Lang.Abs.ConstantType) }
ConstantType
  : PInteger { (fst $1, Lang.Parser.Lang.Abs.INTEGER (fst $1) (snd $1)) }
  | String { (fst $1, Lang.Parser.Lang.Abs.STRING (fst $1) (snd $1)) }
  | Char { (fst $1, Lang.Parser.Lang.Abs.CHAR (fst $1) (snd $1)) }
  | Double { (fst $1, Lang.Parser.Lang.Abs.DOUBLE (fst $1) (snd $1)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pSCPL :: [Token] -> Err Lang.Parser.Lang.Abs.SCPL
pSCPL = fmap snd . pSCPL_internal

pListDefn :: [Token] -> Err [Lang.Parser.Lang.Abs.Defn]
pListDefn = fmap snd . pListDefn_internal

pDefn :: [Token] -> Err Lang.Parser.Lang.Abs.Defn
pDefn = fmap snd . pDefn_internal

pStmt2 :: [Token] -> Err Lang.Parser.Lang.Abs.Stmt
pStmt2 = fmap snd . pStmt2_internal

pLet :: [Token] -> Err Lang.Parser.Lang.Abs.Let
pLet = fmap snd . pLet_internal

pStmt1 :: [Token] -> Err Lang.Parser.Lang.Abs.Stmt
pStmt1 = fmap snd . pStmt1_internal

pCaseTerm :: [Token] -> Err Lang.Parser.Lang.Abs.CaseTerm
pCaseTerm = fmap snd . pCaseTerm_internal

pLetInStmt :: [Token] -> Err Lang.Parser.Lang.Abs.LetInStmt
pLetInStmt = fmap snd . pLetInStmt_internal

pType :: [Token] -> Err Lang.Parser.Lang.Abs.Type
pType = fmap snd . pType_internal

pTypeN :: [Token] -> Err Lang.Parser.Lang.Abs.TypeN
pTypeN = fmap snd . pTypeN_internal

pListTypeN :: [Token] -> Err [Lang.Parser.Lang.Abs.TypeN]
pListTypeN = fmap snd . pListTypeN_internal

pListType :: [Token] -> Err [Lang.Parser.Lang.Abs.Type]
pListType = fmap snd . pListType_internal

pListUIdent :: [Token] -> Err [Lang.Parser.Lang.Abs.UIdent]
pListUIdent = fmap snd . pListUIdent_internal

pCasePattern :: [Token] -> Err Lang.Parser.Lang.Abs.CasePattern
pCasePattern = fmap snd . pCasePattern_internal

pListCaseTerm :: [Token] -> Err [Lang.Parser.Lang.Abs.CaseTerm]
pListCaseTerm = fmap snd . pListCaseTerm_internal

pExp15 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp15 = fmap snd . pExp15_internal

pExp13 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp13 = fmap snd . pExp13_internal

pExp12 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp12 = fmap snd . pExp12_internal

pExp11 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp11 = fmap snd . pExp11_internal

pExp9 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp9 = fmap snd . pExp9_internal

pExp8 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp8 = fmap snd . pExp8_internal

pExp4 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp4 = fmap snd . pExp4_internal

pExp3 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp3 = fmap snd . pExp3_internal

pExp1 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp1 = fmap snd . pExp1_internal

pListPIdent :: [Token] -> Err [Lang.Parser.Lang.Abs.PIdent]
pListPIdent = fmap snd . pListPIdent_internal

pTypeAnnotation :: [Token] -> Err Lang.Parser.Lang.Abs.TypeAnnotation
pTypeAnnotation = fmap snd . pTypeAnnotation_internal

pExp :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp = fmap snd . pExp_internal

pExp2 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp2 = fmap snd . pExp2_internal

pExp5 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp5 = fmap snd . pExp5_internal

pExp6 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp6 = fmap snd . pExp6_internal

pExp7 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp7 = fmap snd . pExp7_internal

pExp10 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp10 = fmap snd . pExp10_internal

pExp14 :: [Token] -> Err Lang.Parser.Lang.Abs.Exp
pExp14 = fmap snd . pExp14_internal

pListExp :: [Token] -> Err [Lang.Parser.Lang.Abs.Exp]
pListExp = fmap snd . pListExp_internal

pConstantType :: [Token] -> Err Lang.Parser.Lang.Abs.ConstantType
pConstantType = fmap snd . pConstantType_internal
}

