-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Lang.Parser.Lang.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Lang.Parser.Lang.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transTokUnit :: Lang.Parser.Lang.Abs.TokUnit -> Result
transTokUnit x = case x of
  Lang.Parser.Lang.Abs.TokUnit string -> failure x

transUIdent :: Lang.Parser.Lang.Abs.UIdent -> Result
transUIdent x = case x of
  Lang.Parser.Lang.Abs.UIdent string -> failure x

transPIdent :: Lang.Parser.Lang.Abs.PIdent -> Result
transPIdent x = case x of
  Lang.Parser.Lang.Abs.PIdent string -> failure x

transPInteger :: Lang.Parser.Lang.Abs.PInteger -> Result
transPInteger x = case x of
  Lang.Parser.Lang.Abs.PInteger string -> failure x

transSCPL :: Show a => Lang.Parser.Lang.Abs.SCPL' a -> Result
transSCPL x = case x of
  Lang.Parser.Lang.Abs.SCPLPROG _ defns -> failure x

transDefn :: Show a => Lang.Parser.Lang.Abs.Defn' a -> Result
transDefn x = case x of
  Lang.Parser.Lang.Abs.DEFN _ pident stmt -> failure x

transStmt :: Show a => Lang.Parser.Lang.Abs.Stmt' a -> Result
transStmt x = case x of
  Lang.Parser.Lang.Abs.CASESTMT _ exp caseterms -> failure x
  Lang.Parser.Lang.Abs.IFSTMT _ exp stmt1 stmt2 -> failure x
  Lang.Parser.Lang.Abs.BARESTMT _ exp -> failure x
  Lang.Parser.Lang.Abs.ELet _ let_ letinstmt stmt -> failure x

transLet :: Show a => Lang.Parser.Lang.Abs.Let' a -> Result
transLet x = case x of
  Lang.Parser.Lang.Abs.LET _ -> failure x
  Lang.Parser.Lang.Abs.LRec _ -> failure x

transCaseTerm :: Show a => Lang.Parser.Lang.Abs.CaseTerm' a -> Result
transCaseTerm x = case x of
  Lang.Parser.Lang.Abs.CASE_STMT _ casepattern stmt -> failure x

transLetInStmt :: Show a => Lang.Parser.Lang.Abs.LetInStmt' a -> Result
transLetInStmt x = case x of
  Lang.Parser.Lang.Abs.LET_IN_STMT _ pident exp -> failure x

transType :: Show a => Lang.Parser.Lang.Abs.Type' a -> Result
transType x = case x of
  Lang.Parser.Lang.Abs.TYPEARROW _ typen type_ -> failure x
  Lang.Parser.Lang.Abs.TYPENext _ typen -> failure x

transTypeN :: Show a => Lang.Parser.Lang.Abs.TypeN' a -> Result
transTypeN x = case x of
  Lang.Parser.Lang.Abs.TYPEUNIT _ tokunit -> failure x
  Lang.Parser.Lang.Abs.TYPECONST_VAR _ uident -> failure x
  Lang.Parser.Lang.Abs.TYPELIST _ type_ -> failure x
  Lang.Parser.Lang.Abs.TYPEPROD _ types -> failure x
  Lang.Parser.Lang.Abs.TYPEBRACKET _ type_ -> failure x
  Lang.Parser.Lang.Abs.CONST_TYPE _ constanttype -> failure x

transCasePattern :: Show a => Lang.Parser.Lang.Abs.CasePattern' a -> Result
transCasePattern x = case x of
  Lang.Parser.Lang.Abs.TRUE_PATTERN _ -> failure x
  Lang.Parser.Lang.Abs.FALSE_PATTERN _ -> failure x

transExp :: Show a => Lang.Parser.Lang.Abs.Exp' a -> Result
transExp x = case x of
  Lang.Parser.Lang.Abs.EInt _ pinteger -> failure x
  Lang.Parser.Lang.Abs.ETrue _ -> failure x
  Lang.Parser.Lang.Abs.EFalse _ -> failure x
  Lang.Parser.Lang.Abs.EVar _ pident -> failure x
  Lang.Parser.Lang.Abs.EString _ string -> failure x
  Lang.Parser.Lang.Abs.EList _ exps -> failure x
  Lang.Parser.Lang.Abs.ECall _ pident exps -> failure x
  Lang.Parser.Lang.Abs.ENeg _ exp -> failure x
  Lang.Parser.Lang.Abs.CONSTERM _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EAPPEND _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EMul _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EDiv _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EAdd _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.ESub _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.ELt _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EGt _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.ELEq _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EGEq _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EEq _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.ENEq _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EAnd _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.EOr _ exp1 exp2 -> failure x
  Lang.Parser.Lang.Abs.ELambda _ pidents stmt -> failure x
  Lang.Parser.Lang.Abs.EApp _ exp1 exp2 -> failure x

transTypeAnnotation :: Show a => Lang.Parser.Lang.Abs.TypeAnnotation' a -> Result
transTypeAnnotation x = case x of
  Lang.Parser.Lang.Abs.TYPEANNOTATION _ type_ -> failure x
  Lang.Parser.Lang.Abs.TYPEANNOTATION_EMPTY _ -> failure x

transConstantType :: Show a => Lang.Parser.Lang.Abs.ConstantType' a -> Result
transConstantType x = case x of
  Lang.Parser.Lang.Abs.INTEGER _ pinteger -> failure x
  Lang.Parser.Lang.Abs.STRING _ string -> failure x
  Lang.Parser.Lang.Abs.CHAR _ char -> failure x
  Lang.Parser.Lang.Abs.DOUBLE _ double -> failure x
