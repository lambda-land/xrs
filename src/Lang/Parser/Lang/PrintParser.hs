-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Lang.

module Lang.PrintParser where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Lang.AbsParser

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Lang.AbsParser.TokUnit where
  prt _ (Lang.AbsParser.TokUnit (_,i)) = doc $ showString i
instance Print Lang.AbsParser.UIdent where
  prt _ (Lang.AbsParser.UIdent (_,i)) = doc $ showString i
instance Print Lang.AbsParser.PIdent where
  prt _ (Lang.AbsParser.PIdent (_,i)) = doc $ showString i
instance Print Lang.AbsParser.PInteger where
  prt _ (Lang.AbsParser.PInteger (_,i)) = doc $ showString i
instance Print Lang.AbsParser.SCPL where
  prt i = \case
    Lang.AbsParser.SCPLPROG defns -> prPrec i 0 (concatD [prt 0 defns])

instance Print [Lang.AbsParser.Defn] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Lang.AbsParser.Defn where
  prt i = \case
    Lang.AbsParser.DEFN pident stmt -> prPrec i 0 (concatD [prt 0 pident, doc (showString "="), prt 1 stmt])

instance Print Lang.AbsParser.Stmt where
  prt i = \case
    Lang.AbsParser.CASESTMT exp caseterms -> prPrec i 2 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 caseterms, doc (showString "}")])
    Lang.AbsParser.IFSTMT exp stmt1 stmt2 -> prPrec i 2 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 2 stmt1, doc (showString "else"), prt 2 stmt2])
    Lang.AbsParser.BARESTMT exp -> prPrec i 2 (concatD [prt 0 exp])
    Lang.AbsParser.ELet let_ letinstmt stmt -> prPrec i 1 (concatD [prt 0 let_, prt 0 letinstmt, doc (showString "in"), prt 1 stmt])

instance Print Lang.AbsParser.Let where
  prt i = \case
    Lang.AbsParser.LET -> prPrec i 0 (concatD [doc (showString "let")])
    Lang.AbsParser.LRec -> prPrec i 0 (concatD [doc (showString "letrec")])

instance Print Lang.AbsParser.CaseTerm where
  prt i = \case
    Lang.AbsParser.CASE_STMT casepattern stmt -> prPrec i 0 (concatD [prt 0 casepattern, doc (showString "->"), prt 1 stmt])

instance Print Lang.AbsParser.LetInStmt where
  prt i = \case
    Lang.AbsParser.LET_IN_STMT pident exp -> prPrec i 0 (concatD [prt 0 pident, doc (showString "="), prt 0 exp])

instance Print Lang.AbsParser.Type where
  prt i = \case
    Lang.AbsParser.TYPEARROW typen type_ -> prPrec i 0 (concatD [prt 0 typen, doc (showString "->"), prt 0 type_])
    Lang.AbsParser.TYPENext typen -> prPrec i 0 (concatD [prt 0 typen])

instance Print Lang.AbsParser.TypeN where
  prt i = \case
    Lang.AbsParser.TYPEUNIT tokunit -> prPrec i 0 (concatD [prt 0 tokunit])
    Lang.AbsParser.TYPECONST_VAR uident -> prPrec i 0 (concatD [prt 0 uident])
    Lang.AbsParser.TYPELIST type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    Lang.AbsParser.TYPEPROD types -> prPrec i 0 (concatD [doc (showString "<"), prt 0 types, doc (showString ">")])
    Lang.AbsParser.TYPEBRACKET type_ -> prPrec i 0 (concatD [doc (showString "("), prt 0 type_, doc (showString ")")])
    Lang.AbsParser.CONST_TYPE constanttype -> prPrec i 0 (concatD [prt 0 constanttype])

instance Print [Lang.AbsParser.TypeN] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Lang.AbsParser.Type] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Lang.AbsParser.UIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lang.AbsParser.CasePattern where
  prt i = \case
    Lang.AbsParser.TRUE_PATTERN -> prPrec i 0 (concatD [doc (showString "True")])
    Lang.AbsParser.FALSE_PATTERN -> prPrec i 0 (concatD [doc (showString "False")])

instance Print [Lang.AbsParser.CaseTerm] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Lang.AbsParser.Exp where
  prt i = \case
    Lang.AbsParser.EInt pinteger -> prPrec i 15 (concatD [prt 0 pinteger])
    Lang.AbsParser.ETrue -> prPrec i 15 (concatD [doc (showString "True")])
    Lang.AbsParser.EFalse -> prPrec i 15 (concatD [doc (showString "False")])
    Lang.AbsParser.EVar pident -> prPrec i 15 (concatD [prt 0 pident])
    Lang.AbsParser.EString str -> prPrec i 15 (concatD [printString str])
    Lang.AbsParser.EList exps -> prPrec i 15 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    Lang.AbsParser.ECall pident exps -> prPrec i 15 (concatD [prt 0 pident, doc (showString "("), prt 0 exps, doc (showString ")")])
    Lang.AbsParser.ENeg exp -> prPrec i 13 (concatD [doc (showString "-"), prt 14 exp])
    Lang.AbsParser.CONSTERM exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString ":"), prt 14 exp2])
    Lang.AbsParser.EAPPEND exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "++"), prt 13 exp2])
    Lang.AbsParser.EMul exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    Lang.AbsParser.EDiv exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    Lang.AbsParser.EAdd exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    Lang.AbsParser.ESub exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    Lang.AbsParser.ELt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    Lang.AbsParser.EGt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    Lang.AbsParser.ELEq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    Lang.AbsParser.EGEq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    Lang.AbsParser.EEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    Lang.AbsParser.ENEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    Lang.AbsParser.EAnd exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    Lang.AbsParser.EOr exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    Lang.AbsParser.ELambda pidents stmt -> prPrec i 1 (concatD [doc (showString "\\"), prt 0 pidents, doc (showString "->"), prt 1 stmt])
    Lang.AbsParser.EApp exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, prt 2 exp2])

instance Print [Lang.AbsParser.PIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x, doc (showString " ")]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print Lang.AbsParser.TypeAnnotation where
  prt i = \case
    Lang.AbsParser.TYPEANNOTATION type_ -> prPrec i 0 (concatD [doc (showString "::"), prt 0 type_])
    Lang.AbsParser.TYPEANNOTATION_EMPTY -> prPrec i 0 (concatD [])

instance Print [Lang.AbsParser.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lang.AbsParser.ConstantType where
  prt i = \case
    Lang.AbsParser.INTEGER pinteger -> prPrec i 0 (concatD [prt 0 pinteger])
    Lang.AbsParser.STRING str -> prPrec i 0 (concatD [printString str])
    Lang.AbsParser.CHAR c -> prPrec i 0 (concatD [prt 0 c])
    Lang.AbsParser.DOUBLE d -> prPrec i 0 (concatD [prt 0 d])
